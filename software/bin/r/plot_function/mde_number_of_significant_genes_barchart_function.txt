##----- Number of Significant Genes Barchart Function -----##
make_number_of_significant_genes_barchart <- function(x_axis_label,y_axis_label,comparison_labels,direction_labels,bar_colours,legend_position,data_label_size,bar_outline_size) 
{

  # gets the names of the columns that indicate significance
  sig_genes_rownames = data.frame(matrix(ncol=length(comparisons), nrow=0), check.names=TRUE)
  colnames(sig_genes_rownames) = paste(comparisons,"_sig",sep="")
  sig_genes_rownames = colnames(data.frame(sig_genes_rownames, check.names=TRUE))
  
  # gets the names of the columns that indicate fold change
  fold_change_rownames = data.frame(matrix(ncol=length(comparisons), nrow=0), check.names=TRUE)
  colnames(fold_change_rownames) = paste(comparisons,"_log2fold",sep="")
  fold_change_rownames = colnames(data.frame(fold_change_rownames, check.names=TRUE))
  
  # gets the sig counts
  upregulated=c()
  downregulated=c() 
  for(index in 1:length(comparisons))
  {
  upregulated[index] = nrow(subset(Mde_annotated,Mde_annotated[[sig_genes_rownames[index]]] == "True" & Mde_annotated[[fold_change_rownames[index]]] > 0))
  downregulated[index] = nrow(subset(Mde_annotated,Mde_annotated[[sig_genes_rownames[index]]] == "True" & Mde_annotated[[fold_change_rownames[index]]] < 0))
  }
  
  dat <- data.frame(
    comparison = factor(default_comparison_labels, levels=default_comparison_labels),
    upregulated = upregulated,
    downregulated = downregulated
  )

  dat.m <- melt(dat, id.vars = "comparison")
  ggp = ggplot(data=dat.m , aes(x=comparison, y=value, fill=variable)) + geom_bar(colour="black", stat="identity", position = "dodge", size=bar_outline_size) + xlab(x_axis_label) + ylab(y_axis_label) + theme_SL2() + geom_text(aes(label=value), position=position_dodge(width=0.9), size=data_label_size, show.legend = FALSE, vjust=2) + scale_color_manual(values=bar_colours,labels=direction_labels) + scale_fill_manual(values=bar_colours,labels=direction_labels) + scale_x_discrete(labels=comparison_labels) + theme(legend.position=legend_position, legend.spacing.x = unit(0.25, 'cm'), axis.text.x = element_text(angle = 45, hjust = 1)) + scale_y_continuous(expand=c(0,0), limits=c(0,max(dat.m$value*1.1)))
  return(ggp)
}

